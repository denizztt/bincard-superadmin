package com.bincard.bincard_superadmin;

import javafx.application.Platform;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardWatchEventKinds;
import java.nio.file.WatchEvent;
import java.nio.file.WatchKey;
import java.nio.file.WatchService;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.function.Consumer;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;

/**
 * Web form'dan JavaFX'e veri aktarƒ±mƒ± i√ßin utility class
 * HTML sayfalarƒ±ndan gelen form verilerini otomatik olarak JavaFX panellerine aktarƒ±r
 */
public class WebToJavaFXBridge {
    
    private static final String DATA_FILE_NAME = "bincard_payment_point_data.json";
    private static final String DOWNLOADS_FOLDER = System.getProperty("user.home") + "/Downloads";
    private static final Path DATA_FILE_PATH = Paths.get(DOWNLOADS_FOLDER, DATA_FILE_NAME);
    
    private static WatchService watchService;
    private static boolean isWatching = false;
    private static Consumer<PaymentPointData> dataCallback;
    
    /**
     * Web form'dan gelen veri modeli
     */
    public static class PaymentPointData {
        public String name;
        public String description;
        public double latitude;
        public double longitude;
        public String address;
        public String street;
        public String district;
        public String city;
        public String postalCode;
        public String contact;
        public String startTime;
        public String endTime;
        public String[] paymentMethods;
        public boolean active;
        public String timestamp;
        public long id;
        
        @Override
        public String toString() {
            return String.format("PaymentPointData{name='%s', lat=%f, lng=%f, address='%s'}", 
                               name, latitude, longitude, address);
        }
    }
    
    /**
     * Web form'dan gelen verileri dinlemeye ba≈ülar
     * @param callback Yeni veri geldiƒüinde √ßaƒürƒ±lacak callback fonksiyonu
     */
    public static void startWatching(Consumer<PaymentPointData> callback) {
        if (isWatching) {
            System.out.println("‚ö†Ô∏è Zaten web verilerini dinliyoruz");
            return;
        }
        
        dataCallback = callback;
        
        CompletableFuture.runAsync(() -> {
            try {
                watchService = Paths.get(DOWNLOADS_FOLDER).getFileSystem().newWatchService();
                Paths.get(DOWNLOADS_FOLDER).register(watchService, StandardWatchEventKinds.ENTRY_MODIFY);
                
                isWatching = true;
                System.out.println("üëÄ Web form verileri dinleniyor: " + DATA_FILE_PATH);
                
                while (isWatching) {
                    WatchKey key = watchService.take();
                    
                    for (WatchEvent<?> event : key.pollEvents()) {
                        if (event.kind() == StandardWatchEventKinds.ENTRY_MODIFY) {
                            Path fileName = (Path) event.context();
                            
                            if (fileName.toString().equals(DATA_FILE_NAME)) {
                                System.out.println("üì• Web form verisi algƒ±landƒ±: " + fileName);
                                
                                // Kƒ±sa bir gecikme - dosya yazƒ±mƒ±nƒ±n tamamlanmasƒ± i√ßin
                                Thread.sleep(1000);
                                
                                processNewWebData();
                            }
                        }
                    }
                    
                    key.reset();
                }
                
            } catch (Exception e) {
                System.err.println("‚ùå Web veri dinleme hatasƒ±: " + e.getMessage());
                isWatching = false;
            }
        });
    }
    
    /**
     * Web form veri dinlemeyi durdurur
     */
    public static void stopWatching() {
        isWatching = false;
        if (watchService != null) {
            try {
                watchService.close();
                System.out.println("üõë Web veri dinleme durduruldu");
            } catch (IOException e) {
                System.err.println("‚ùå Watch service kapatma hatasƒ±: " + e.getMessage());
            }
        }
    }
    
    /**
     * Yeni web verilerini i≈üler
     */
    private static void processNewWebData() {
        try {
            if (!Files.exists(DATA_FILE_PATH)) {
                System.out.println("‚ö†Ô∏è Veri dosyasƒ± bulunamadƒ±: " + DATA_FILE_PATH);
                return;
            }
            
            String jsonContent = Files.readString(DATA_FILE_PATH);
            Gson gson = new Gson();
            
            // JSON array olarak parse et
            PaymentPointData[] dataArray = gson.fromJson(jsonContent, PaymentPointData[].class);
            
            if (dataArray != null && dataArray.length > 0) {
                // En son eklenen veriyi al (en y√ºksek ID'li)
                PaymentPointData latestData = dataArray[0];
                for (PaymentPointData data : dataArray) {
                    if (data.id > latestData.id) {
                        latestData = data;
                    }
                }
                
                System.out.println("üÜï Yeni web verisi i≈üleniyor: " + latestData);
                
                // UI thread'de callback'i √ßaƒüƒ±r
                if (dataCallback != null) {
                    Platform.runLater(() -> {
                        try {
                            dataCallback.accept(latestData);
                            System.out.println("‚úÖ Web verisi JavaFX'e aktarƒ±ldƒ±");
                        } catch (Exception e) {
                            System.err.println("‚ùå Callback hatasƒ±: " + e.getMessage());
                        }
                    });
                }
            }
            
        } catch (JsonSyntaxException e) {
            System.err.println("‚ùå JSON parse hatasƒ±: " + e.getMessage());
        } catch (IOException e) {
            System.err.println("‚ùå Dosya okuma hatasƒ±: " + e.getMessage());
        } catch (Exception e) {
            System.err.println("‚ùå Web veri i≈üleme hatasƒ±: " + e.getMessage());
        }
    }
    
    /**
     * Mevcut web verilerini manuel olarak kontrol et
     */
    public static PaymentPointData[] readExistingWebData() {
        try {
            if (!Files.exists(DATA_FILE_PATH)) {
                System.out.println("üìÑ Hen√ºz web verisi yok: " + DATA_FILE_PATH);
                return new PaymentPointData[0];
            }
            
            String jsonContent = Files.readString(DATA_FILE_PATH);
            Gson gson = new Gson();
            
            PaymentPointData[] dataArray = gson.fromJson(jsonContent, PaymentPointData[].class);
            
            System.out.println("üìä Mevcut web verisi sayƒ±sƒ±: " + (dataArray != null ? dataArray.length : 0));
            
            return dataArray != null ? dataArray : new PaymentPointData[0];
            
        } catch (Exception e) {
            System.err.println("‚ùå Mevcut web verisi okuma hatasƒ±: " + e.getMessage());
            return new PaymentPointData[0];
        }
    }
    
    /**
     * Token dosyasƒ±nƒ± olu≈üturur (web sayfasƒ± i√ßin)
     */
    public static void createTokenFile(TokenDTO accessToken) {
        try {
            String userHome = System.getProperty("user.home");
            Path tokenPath = Paths.get(userHome, "token_temp.txt");
            
            if (accessToken != null && accessToken.getToken() != null) {
                Files.write(tokenPath, accessToken.getToken().getBytes());
                System.out.println("üîë Token dosyasƒ± olu≈üturuldu: " + tokenPath);
            } else {
                Files.write(tokenPath, "dummy-token".getBytes());
                System.out.println("‚ö†Ô∏è Ge√ßersiz token, dummy token yazƒ±ldƒ±: " + tokenPath);
            }
            
        } catch (IOException e) {
            System.err.println("‚ùå Token dosyasƒ± olu≈üturma hatasƒ±: " + e.getMessage());
        }
    }
    
    /**
     * Web sayfasƒ± i√ßin token injection script'ini g√ºnceller
     */
    public static void updateTokenScript(TokenDTO accessToken) {
        try {
            Path scriptPath = Paths.get("token_inject.js");
            
            String scriptContent = String.format(
                """
                // Token injection script - JavaFX tarafƒ±ndan g√ºncellenmi≈ü
                console.log('üîë Token injection script y√ºklendi (JavaFX g√ºncellemesi)');
                
                // Global token deƒüi≈ükeni
                let token = '%s';
                
                // Firebase konfig√ºrasyonu
                window.FIREBASE_CONFIG = {
                    projectId: 'bincard-9a335',
                    apiKey: 'AIzaSyBRYfrvFsxgARSM_iE7JA1EHu1nSpaWAxc',
                    serviceAccount: 'firebase-adminsdk-fbsvc@bincard-9a335.iam.gserviceaccount.com'
                };
                
                // Token'ƒ± localStorage'a kaydet
                localStorage.setItem('bincard_auth_token', token);
                
                // Global deƒüi≈ükenler
                window.authToken = token;
                window.API_BASE_URL = 'http://localhost:8080/v1/api';
                window.GOOGLE_MAPS_API_KEY = 'AIzaSyBRYfrvFsxgARSM_iE7JA1EHu1nSpaWAxc';
                
                console.log('‚úÖ JavaFX token g√ºncellendi:', token.substring(0, 20) + '...');
                """, 
                accessToken != null ? accessToken.getToken() : "dummy-token"
            );
            
            Files.write(scriptPath, scriptContent.getBytes());
            System.out.println("üîÑ Token script g√ºncellendi: " + scriptPath);
            
        } catch (IOException e) {
            System.err.println("‚ùå Token script g√ºncelleme hatasƒ±: " + e.getMessage());
        }
    }
    
    /**
     * Test metodu - bridge'in √ßalƒ±≈üƒ±p √ßalƒ±≈ümadƒ±ƒüƒ±nƒ± kontrol eder
     */
    public static void testBridge() {
        System.out.println("üß™ Web-JavaFX Bridge testi ba≈ülƒ±yor...");
        System.out.println("üìÅ Veri dosyasƒ± yolu: " + DATA_FILE_PATH);
        System.out.println("üìÇ Downloads klas√∂r√º: " + DOWNLOADS_FOLDER);
        
        PaymentPointData[] existingData = readExistingWebData();
        System.out.println("üìä Mevcut veri sayƒ±sƒ±: " + existingData.length);
        
        System.out.println("‚úÖ Bridge test tamamlandƒ±");
    }
}
